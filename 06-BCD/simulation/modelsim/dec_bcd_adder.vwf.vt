// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/21/2023 15:14:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dec_bcd_adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dec_bcd_adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_Dec0;
reg A_Dec1;
reg A_Dec2;
reg A_Dec3;
reg A_Digits0;
reg A_Digits1;
reg A_Digits2;
reg A_Digits3;
reg B_Dec0;
reg B_Dec1;
reg B_Dec2;
reg B_Dec3;
reg B_Digits0;
reg B_Digits1;
reg B_Digits2;
reg B_Digits3;
reg Ci;
// wires                                               
wire Digit;
wire Y_Dec_0;
wire Y_Dec_1;
wire Y_Dec_2;
wire Y_Dec_3;
wire Y_Digits0;
wire Y_Digits1;
wire Y_Digits2;
wire Y_Digits3;

// assign statements (if any)                          
dec_bcd_adder i1 (
// port map - connection between master ports and signals/registers   
	.A_Dec0(A_Dec0),
	.A_Dec1(A_Dec1),
	.A_Dec2(A_Dec2),
	.A_Dec3(A_Dec3),
	.A_Digits0(A_Digits0),
	.A_Digits1(A_Digits1),
	.A_Digits2(A_Digits2),
	.A_Digits3(A_Digits3),
	.B_Dec0(B_Dec0),
	.B_Dec1(B_Dec1),
	.B_Dec2(B_Dec2),
	.B_Dec3(B_Dec3),
	.B_Digits0(B_Digits0),
	.B_Digits1(B_Digits1),
	.B_Digits2(B_Digits2),
	.B_Digits3(B_Digits3),
	.Ci(Ci),
	.Digit(Digit),
	.Y_Dec_0(Y_Dec_0),
	.Y_Dec_1(Y_Dec_1),
	.Y_Dec_2(Y_Dec_2),
	.Y_Dec_3(Y_Dec_3),
	.Y_Digits0(Y_Digits0),
	.Y_Digits1(Y_Digits1),
	.Y_Digits2(Y_Digits2),
	.Y_Digits3(Y_Digits3)
);
initial 
begin 
#1000000 $stop;
end 

// A_Dec3
initial
begin
	A_Dec3 = 1'b0;
	A_Dec3 = #160000 1'b1;
	A_Dec3 = #40000 1'b0;
	A_Dec3 = #280000 1'b1;
	A_Dec3 = #40000 1'b0;
	A_Dec3 = #280000 1'b1;
	A_Dec3 = #40000 1'b0;
end 

// A_Dec2
initial
begin
	A_Dec2 = 1'b0;
	A_Dec2 = #80000 1'b1;
	A_Dec2 = #80000 1'b0;
	A_Dec2 = #240000 1'b1;
	A_Dec2 = #80000 1'b0;
	A_Dec2 = #240000 1'b1;
	A_Dec2 = #80000 1'b0;
end 

// A_Dec1
initial
begin
	repeat(2)
	begin
		A_Dec1 = 1'b0;
		A_Dec1 = #40000 1'b1;
		# 40000;
	end
	A_Dec1 = 1'b0;
	A_Dec1 = #200000 1'b1;
	A_Dec1 = #40000 1'b0;
	A_Dec1 = #40000 1'b1;
	A_Dec1 = #40000 1'b0;
	A_Dec1 = #200000 1'b1;
	A_Dec1 = #40000 1'b0;
	A_Dec1 = #40000 1'b1;
	A_Dec1 = #40000 1'b0;
end 

// A_Dec0
initial
begin
	repeat(5)
	begin
		A_Dec0 = 1'b0;
		A_Dec0 = #20000 1'b1;
		# 20000;
	end
	A_Dec0 = 1'b0;
	A_Dec0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		A_Dec0 = 1'b0;
		A_Dec0 = #20000 1'b1;
		# 20000;
	end
	A_Dec0 = 1'b0;
	A_Dec0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		A_Dec0 = 1'b0;
		A_Dec0 = #20000 1'b1;
		# 20000;
	end
	A_Dec0 = 1'b0;
	A_Dec0 = #140000 1'b1;
end 

// A_Digits3
initial
begin
	A_Digits3 = 1'b0;
	A_Digits3 = #160000 1'b1;
	A_Digits3 = #40000 1'b0;
	A_Digits3 = #280000 1'b1;
	A_Digits3 = #40000 1'b0;
	A_Digits3 = #280000 1'b1;
	A_Digits3 = #40000 1'b0;
end 

// A_Digits2
initial
begin
	A_Digits2 = 1'b0;
	A_Digits2 = #80000 1'b1;
	A_Digits2 = #80000 1'b0;
	A_Digits2 = #240000 1'b1;
	A_Digits2 = #80000 1'b0;
	A_Digits2 = #240000 1'b1;
	A_Digits2 = #80000 1'b0;
end 

// A_Digits1
initial
begin
	repeat(2)
	begin
		A_Digits1 = 1'b0;
		A_Digits1 = #40000 1'b1;
		# 40000;
	end
	A_Digits1 = 1'b0;
	A_Digits1 = #200000 1'b1;
	A_Digits1 = #40000 1'b0;
	A_Digits1 = #40000 1'b1;
	A_Digits1 = #40000 1'b0;
	A_Digits1 = #200000 1'b1;
	A_Digits1 = #40000 1'b0;
	A_Digits1 = #40000 1'b1;
	A_Digits1 = #40000 1'b0;
end 

// A_Digits0
initial
begin
	repeat(5)
	begin
		A_Digits0 = 1'b0;
		A_Digits0 = #20000 1'b1;
		# 20000;
	end
	A_Digits0 = 1'b0;
	A_Digits0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		A_Digits0 = 1'b0;
		A_Digits0 = #20000 1'b1;
		# 20000;
	end
	A_Digits0 = 1'b0;
	A_Digits0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		A_Digits0 = 1'b0;
		A_Digits0 = #20000 1'b1;
		# 20000;
	end
	A_Digits0 = 1'b0;
	A_Digits0 = #140000 1'b1;
end 

// B_Dec3
initial
begin
	B_Dec3 = 1'b0;
	B_Dec3 = #160000 1'b1;
	B_Dec3 = #40000 1'b0;
	B_Dec3 = #280000 1'b1;
	B_Dec3 = #40000 1'b0;
	B_Dec3 = #280000 1'b1;
	B_Dec3 = #40000 1'b0;
end 

// B_Dec2
initial
begin
	B_Dec2 = 1'b0;
	B_Dec2 = #80000 1'b1;
	B_Dec2 = #80000 1'b0;
	B_Dec2 = #240000 1'b1;
	B_Dec2 = #80000 1'b0;
	B_Dec2 = #240000 1'b1;
	B_Dec2 = #80000 1'b0;
end 

// B_Dec1
initial
begin
	repeat(2)
	begin
		B_Dec1 = 1'b0;
		B_Dec1 = #40000 1'b1;
		# 40000;
	end
	B_Dec1 = 1'b0;
	B_Dec1 = #200000 1'b1;
	B_Dec1 = #40000 1'b0;
	B_Dec1 = #40000 1'b1;
	B_Dec1 = #40000 1'b0;
	B_Dec1 = #200000 1'b1;
	B_Dec1 = #40000 1'b0;
	B_Dec1 = #40000 1'b1;
	B_Dec1 = #40000 1'b0;
end 

// B_Dec0
initial
begin
	repeat(5)
	begin
		B_Dec0 = 1'b0;
		B_Dec0 = #20000 1'b1;
		# 20000;
	end
	B_Dec0 = 1'b0;
	B_Dec0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		B_Dec0 = 1'b0;
		B_Dec0 = #20000 1'b1;
		# 20000;
	end
	B_Dec0 = 1'b0;
	B_Dec0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		B_Dec0 = 1'b0;
		B_Dec0 = #20000 1'b1;
		# 20000;
	end
	B_Dec0 = 1'b0;
	B_Dec0 = #140000 1'b1;
end 

// B_Digits3
initial
begin
	B_Digits3 = 1'b0;
	B_Digits3 = #160000 1'b1;
	B_Digits3 = #40000 1'b0;
	B_Digits3 = #280000 1'b1;
	B_Digits3 = #40000 1'b0;
	B_Digits3 = #280000 1'b1;
	B_Digits3 = #40000 1'b0;
end 

// B_Digits2
initial
begin
	B_Digits2 = 1'b0;
	B_Digits2 = #80000 1'b1;
	B_Digits2 = #80000 1'b0;
	B_Digits2 = #240000 1'b1;
	B_Digits2 = #80000 1'b0;
	B_Digits2 = #240000 1'b1;
	B_Digits2 = #80000 1'b0;
end 

// B_Digits1
initial
begin
	repeat(2)
	begin
		B_Digits1 = 1'b0;
		B_Digits1 = #40000 1'b1;
		# 40000;
	end
	B_Digits1 = 1'b0;
	B_Digits1 = #200000 1'b1;
	B_Digits1 = #40000 1'b0;
	B_Digits1 = #40000 1'b1;
	B_Digits1 = #40000 1'b0;
	B_Digits1 = #200000 1'b1;
	B_Digits1 = #40000 1'b0;
	B_Digits1 = #40000 1'b1;
	B_Digits1 = #40000 1'b0;
end 

// B_Digits0
initial
begin
	repeat(5)
	begin
		B_Digits0 = 1'b0;
		B_Digits0 = #20000 1'b1;
		# 20000;
	end
	B_Digits0 = 1'b0;
	B_Digits0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		B_Digits0 = 1'b0;
		B_Digits0 = #20000 1'b1;
		# 20000;
	end
	B_Digits0 = 1'b0;
	B_Digits0 = #140000 1'b1;
	# 20000;
	repeat(4)
	begin
		B_Digits0 = 1'b0;
		B_Digits0 = #20000 1'b1;
		# 20000;
	end
	B_Digits0 = 1'b0;
	B_Digits0 = #140000 1'b1;
end 

// Ci
initial
begin
	Ci = 1'b0;
end 
endmodule

